/*
### Домашнее задание

1. Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

```js
{
title: "Название альбома",
artist: "Исполнитель",
year: "Год выпуска"
}
```

Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

2. Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

Необходимо создать систему управления этими заказами, которая позволит:

• Отслеживать, какой повар готовит какое блюдо.
• Записывать, какие блюда заказал каждый клиент.

Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

Повара и их специализации:

Виктор - специализация: Пицца.
Ольга - специализация: Суши.
Дмитрий - специализация: Десерты.

Блюда и их повара:

Пицца "Маргарита" - повар: Виктор.
Пицца "Пепперони" - повар: Виктор.
Суши "Филадельфия" - повар: Ольга.
Суши "Калифорния" - повар: Ольга.
Тирамису - повар: Дмитрий.
Чизкейк - повар: Дмитрий.

Заказы:

Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
Клиент Ирина заказала: Чизкейк.
*/

// --------------------------------------
console.log("----------- 1 -----------");
const musicCollection = {
    musicAlbums: [
        { title: "Титаник", artist: "Nautilus Pompilius", year: 1994 },
        { title: "10 V1.1.0", artist: "Научно-Технический Рэп", year: 2020 },
        { title: "Музыка настроения", artist: "Трио Виктори", year: 2016 },
    ],
    [Symbol.iterator]() {
        this.index = 0;
        return this;
    },
    next() {
        return this.index < this.musicAlbums.length
            ? { done: false, value: this.musicAlbums[this.index++] }
            : { done: true };
    },
};
for (const album of musicCollection) {
    console.log(
        `Альбом "${album.title}" исполнителя ${album.artist} выпущен в ${album.year} году`
    );
}

// --------------------------------------
console.log("----------- 2 -----------");
let cooks = new Map();
cooks.set("Виктор", "пицца").set("Ольга", "суши").set("Дмитрий", "десерты");

console.log(`Виктор - специализация: ${cooks.get("Виктор")}`);
console.log(`Ольга - специализация: ${cooks.get("Ольга")}`);
console.log(`Дмитрий - специализация: ${cooks.get("Дмитрий")}`);
console.log();

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

let dishes = new Map();
dishes
    .set("пицца 'Маргарита'", "Виктор")
    .set("пицца 'Пепперони'", "Виктор")
    .set("суши 'Филадельфия'", "Ольга")
    .set("суши 'Калифорния'", "Ольга")
    .set("тирамису", "Дмитрий")
    .set("чизкейк", "Дмитрий");

console.log(
    `Пиццу 'Маргарита' приготовил повар: ${dishes.get("пицца 'Маргарита'")}`
);
console.log(
    `Суши 'Калифорния' приготовил повар: ${dishes.get("суши 'Калифорния'")}`
);
console.log(`Чизкейк приготовил повар: ${dishes.get("чизкейк")}`);
console.log();

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

let orders = new Map(); //заказы всех клиентов

//заказ первого клиента
let client1 = { name: "Алексей" };
let clientOrder1 = new Set();
clientOrder1.add("пицца 'Пепперони'").add("тирамису");

//заказ второго клиента
let client2 = { name: "Мария" };
let clientOrder2 = new Set();
clientOrder2.add("суши 'Калифорния'").add("пицца 'Маргарита'");

//заказ третьего клиента
let client3 = { name: "Ирина" };
let clientOrder3 = new Set();
clientOrder3.add("чизкейк");

orders
    .set(client1, clientOrder1) // добавляем заказы клиентов в список
    .set(client2, clientOrder2)
    .set(client3, clientOrder3);

console.log(
    `Клиент ${client1.name} заказал(а):  ${[...orders.get(client1)]
        .join(" и ")
        .split(",")}`
);
console.log(
    `Клиент ${client2.name} заказал(а):  ${[...orders.get(client2)]
        .join(" и ")
        .split(",")}`
);
console.log(
    `Клиент ${client3.name} заказал(а):  ${[...orders.get(client3)]
        .join(" и ")
        .split(",")}`
);

// -------------------------------
console.log("-------------------------------");
console.log('Тест с разделителем блюд — "и"');
let client7 = { name: "Alice" };
let clientOrder7 = new Set();
clientOrder7.add("суши 'Калифорния'").add("пицца 'Маргарита'").add("чизкейк");
orders.set(client7, clientOrder7);
console.log(
    `Клиент ${client7.name} заказал(а):  ${[...orders.get(client7)]
        .join(" и ")
        .split(",")}`
);

// -------------------------------
console.log("-------------------------------");
console.log("Вывод всех через forEach");
orders.forEach((value, key) => {
    console.log(
        `Клиент ${key.name} заказал(а): ${[...value].join(" и ").split(",")}`
    );
});
